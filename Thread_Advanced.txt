======================================================= JDBC connection pool =================================================================
-> Connection pool in JDBC: Used for increase an performance.
-> w/o connection pool , every time needs to create an connection object and shutdown as well.
-> In the begning only, A pool of connection i will create. Whenever we need to communicate with DB, will request to connection pool to give one connection. So the same connection object, we used multiple times, performance by default increased.
-> Same apply for thread. So replace the connection with thread.

==============================================================================================================================================
-> For every time independent job needs to create a different thread. create and do the job and terminate the thread.
   1) if 10 independent jobs are there, we required 10 diff threads.
   2) So instead of this, i create a pool of 5 threads. 
   3) 10 jobs and 5 threads. Request will go to connection pool. First 5 threads will complete 5 jobs , again same 5 threads will do another 5 jobs. So a single thread can perform multiple independent jobs. so the performance of system by default increased.

======================================================= Thread pool ==========================================================================
-> Creating a new thread for every job make create performance and memory problems.
-> To overcome this, we should go for "Thread pool".
-> Thread pool is a pool of already created threads and ready to do our job.
-> Java 1.5V introduces thread pool framework to implement thread pools.
-> Thread pool framework also knows as "Executor Framework".

Qns1) How can we create a thread pool??
Ans) ExecutorService service = Executors.newFixedThreadPool(3);     
Qns2) How can we submit this runnable jobs to this thread pool??
Ans) we can submit a runnable job by using "submit()" method.
		service.submit(job);    // job implements runnable
		service.shutdown();     // for shutdown the service.
===============================================================================================================================================
public class PrintJob implements Runnable {

	private String name;

	public PrintJob(String name) {
		this.name = name;
	}

	@Override
	public void run() {
		System.out.println(name + "...Job started by Thread:" + Thread.currentThread().getName());
		try {
			Thread.sleep(5000);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		System.out.println(name + "...Job completed by Thread:" + Thread.currentThread().getName());
	}

	public static void main(String[] args) {
		PrintJob[] jobs = { new PrintJob("Bhimsen1"), new PrintJob("Bhimsen2"), new PrintJob("Bhimsen3"),
				new PrintJob("Bhimsen4"), new PrintJob("Bhimsen5"), new PrintJob("Bhimsen6") };
		ExecutorService service = Executors.newFixedThreadPool(3);
		for (PrintJob job : jobs)
			service.submit(job);
		service.shutdown();
	}

}
========================================================== example ============================================================================
-> while deveopling web servers and applications servers, we can use thread pool concept.
	 Mostly by defalut size is 60. At a time can procees 60 requests. we can also customize the size.
	 
===================================================== Callable and Future ==================================================================

-> In the case of Runnable job, thread won't return anything after completing the job.
-> If a thread is required to return some result after execution, then we should go for Callable.
-> Callable interface contains only one method: "call()".
		public Object call() throws Exception;
-> If we submit a callable object to "executor" then after completing the job, thread returns ab object of type is "Future". 
-> Future object can be used to retrieve the result from Callable job.
-> Diff b/w runnable and callable.
1) Within a run() method , if there is any chance of raising checked exception, compulsory we should handle by try-catch block bcz we can't use throws keyword for run() method.
1) Within call() method, if there is any chance of raising checked exception, we're not required to handle using try-catch bcz call() method alredy throws exception.
2) Runnable present in lang vs callable Interface present in java.util.concurrent package.
3) Introduced in version: 1.0V vs 1.5v.  
4) method: run() vs call()
5) return type: void vs Object,
/////////////////////////////////////////////////////  code ///////////////////////////////////////////////////////////////////////////////
import java.util.concurrent.*;
public class MyCallable implements Callable {
	private int num;

	public MyCallable(int num) {
		this.num = num;
	}

	@Override
	public Object call() throws Exception {
		System.out.println(Thread.currentThread().getName() + " sum of first " + num + " numbers");
		int sum = 0;
		for (int i = 0; i <= num; i++)
			sum += i;
		return sum;
	}

	public static void main(String[] args) throws InterruptedException, ExecutionException {
		MyCallable[] jobs = { new MyCallable(10), new MyCallable(20), new MyCallable(30), new MyCallable(40),
				new MyCallable(50), new MyCallable(60) };
		ExecutorService service = Executors.newFixedThreadPool(3);
		for (MyCallable job : jobs) {
			Future f = service.submit(job);
			System.out.println(f.get());
		}
		service.shutdown();
	}
}
///////////////////////////////////////////////////////////// by durga done/////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////pending ////////////////////////////////////////////////////////////
https://www.youtube.com/watch?v=MB_qCXBSgK0&list=PLL8woMHwr36EDxjUoCzboZjedsnhLP1j4&index=14
completablefuture in spring boot

















